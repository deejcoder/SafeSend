// Code generated by entc, DO NOT EDIT.

package entity

import (
	"SafeSend/pkg/interfaces"
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the entity type in the database.
	Label = "entity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntityType holds the string denoting the entity_type field in the database.
	FieldEntityType = "entity_type"
	// FieldDateCreated holds the string denoting the date_created field in the database.
	FieldDateCreated = "date_created"
	// FieldDateModified holds the string denoting the date_modified field in the database.
	FieldDateModified = "date_modified"
	// FieldDateDeleted holds the string denoting the date_deleted field in the database.
	FieldDateDeleted = "date_deleted"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// Table holds the table name of the entity in the database.
	Table = "entities"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "entity_users"
	// GroupsTable is the table that holds the groups relation/edge.
	GroupsTable = "groups"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "groups"
	// GroupsColumn is the table column denoting the groups relation/edge.
	GroupsColumn = "entity_groups"
)

// Columns holds all SQL columns for entity fields.
var Columns = []string{
	FieldID,
	FieldEntityType,
	FieldDateCreated,
	FieldDateModified,
	FieldDateDeleted,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDateCreated holds the default value on creation for the "date_created" field.
	DefaultDateCreated time.Time
	// DefaultDateModified holds the default value on creation for the "date_modified" field.
	DefaultDateModified time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// EntityTypeValidator is a validator for the "entity_type" field enum values. It is called by the builders before save.
func EntityTypeValidator(et interfaces.EntityType) error {
	switch et {
	case "USER", "GROUP":
		return nil
	default:
		return fmt.Errorf("entity: invalid enum value for entity_type field: %q", et)
	}
}
