// Code generated by entc, DO NOT EDIT.

package entity

import (
	"SafeSend/pkg/ent/predicate"
	"SafeSend/pkg/interfaces"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DateCreated applies equality check predicate on the "date_created" field. It's identical to DateCreatedEQ.
func DateCreated(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateCreated), v))
	})
}

// DateModified applies equality check predicate on the "date_modified" field. It's identical to DateModifiedEQ.
func DateModified(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateModified), v))
	})
}

// DateDeleted applies equality check predicate on the "date_deleted" field. It's identical to DateDeletedEQ.
func DateDeleted(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateDeleted), v))
	})
}

// EntityTypeEQ applies the EQ predicate on the "entity_type" field.
func EntityTypeEQ(v interfaces.EntityType) predicate.Entity {
	vc := v
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntityType), vc))
	})
}

// EntityTypeNEQ applies the NEQ predicate on the "entity_type" field.
func EntityTypeNEQ(v interfaces.EntityType) predicate.Entity {
	vc := v
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntityType), vc))
	})
}

// EntityTypeIn applies the In predicate on the "entity_type" field.
func EntityTypeIn(vs ...interfaces.EntityType) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEntityType), v...))
	})
}

// EntityTypeNotIn applies the NotIn predicate on the "entity_type" field.
func EntityTypeNotIn(vs ...interfaces.EntityType) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEntityType), v...))
	})
}

// DateCreatedEQ applies the EQ predicate on the "date_created" field.
func DateCreatedEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateCreated), v))
	})
}

// DateCreatedNEQ applies the NEQ predicate on the "date_created" field.
func DateCreatedNEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateCreated), v))
	})
}

// DateCreatedIn applies the In predicate on the "date_created" field.
func DateCreatedIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateCreated), v...))
	})
}

// DateCreatedNotIn applies the NotIn predicate on the "date_created" field.
func DateCreatedNotIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateCreated), v...))
	})
}

// DateCreatedGT applies the GT predicate on the "date_created" field.
func DateCreatedGT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateCreated), v))
	})
}

// DateCreatedGTE applies the GTE predicate on the "date_created" field.
func DateCreatedGTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateCreated), v))
	})
}

// DateCreatedLT applies the LT predicate on the "date_created" field.
func DateCreatedLT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateCreated), v))
	})
}

// DateCreatedLTE applies the LTE predicate on the "date_created" field.
func DateCreatedLTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateCreated), v))
	})
}

// DateModifiedEQ applies the EQ predicate on the "date_modified" field.
func DateModifiedEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateModified), v))
	})
}

// DateModifiedNEQ applies the NEQ predicate on the "date_modified" field.
func DateModifiedNEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateModified), v))
	})
}

// DateModifiedIn applies the In predicate on the "date_modified" field.
func DateModifiedIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateModified), v...))
	})
}

// DateModifiedNotIn applies the NotIn predicate on the "date_modified" field.
func DateModifiedNotIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateModified), v...))
	})
}

// DateModifiedGT applies the GT predicate on the "date_modified" field.
func DateModifiedGT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateModified), v))
	})
}

// DateModifiedGTE applies the GTE predicate on the "date_modified" field.
func DateModifiedGTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateModified), v))
	})
}

// DateModifiedLT applies the LT predicate on the "date_modified" field.
func DateModifiedLT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateModified), v))
	})
}

// DateModifiedLTE applies the LTE predicate on the "date_modified" field.
func DateModifiedLTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateModified), v))
	})
}

// DateDeletedEQ applies the EQ predicate on the "date_deleted" field.
func DateDeletedEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateDeleted), v))
	})
}

// DateDeletedNEQ applies the NEQ predicate on the "date_deleted" field.
func DateDeletedNEQ(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateDeleted), v))
	})
}

// DateDeletedIn applies the In predicate on the "date_deleted" field.
func DateDeletedIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateDeleted), v...))
	})
}

// DateDeletedNotIn applies the NotIn predicate on the "date_deleted" field.
func DateDeletedNotIn(vs ...time.Time) predicate.Entity {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Entity(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateDeleted), v...))
	})
}

// DateDeletedGT applies the GT predicate on the "date_deleted" field.
func DateDeletedGT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateDeleted), v))
	})
}

// DateDeletedGTE applies the GTE predicate on the "date_deleted" field.
func DateDeletedGTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateDeleted), v))
	})
}

// DateDeletedLT applies the LT predicate on the "date_deleted" field.
func DateDeletedLT(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateDeleted), v))
	})
}

// DateDeletedLTE applies the LTE predicate on the "date_deleted" field.
func DateDeletedLTE(v time.Time) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateDeleted), v))
	})
}

// DateDeletedIsNil applies the IsNil predicate on the "date_deleted" field.
func DateDeletedIsNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDateDeleted)))
	})
}

// DateDeletedNotNil applies the NotNil predicate on the "date_deleted" field.
func DateDeletedNotNil() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDateDeleted)))
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Group) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		p(s.Not())
	})
}
