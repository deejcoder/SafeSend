// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SafeSend/pkg/ent/entity"
	"SafeSend/pkg/ent/group"
	"SafeSend/pkg/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GroupCreate is the builder for creating a Group entity.
type GroupCreate struct {
	config
	mutation *GroupMutation
	hooks    []Hook
}

// SetGroupName sets the "groupName" field.
func (gc *GroupCreate) SetGroupName(s string) *GroupCreate {
	gc.mutation.SetGroupName(s)
	return gc
}

// SetMaxParticipants sets the "maxParticipants" field.
func (gc *GroupCreate) SetMaxParticipants(i int32) *GroupCreate {
	gc.mutation.SetMaxParticipants(i)
	return gc
}

// SetInviteOnly sets the "inviteOnly" field.
func (gc *GroupCreate) SetInviteOnly(b bool) *GroupCreate {
	gc.mutation.SetInviteOnly(b)
	return gc
}

// SetNillableInviteOnly sets the "inviteOnly" field if the given value is not nil.
func (gc *GroupCreate) SetNillableInviteOnly(b *bool) *GroupCreate {
	if b != nil {
		gc.SetInviteOnly(*b)
	}
	return gc
}

// SetDateCreated sets the "dateCreated" field.
func (gc *GroupCreate) SetDateCreated(t time.Time) *GroupCreate {
	gc.mutation.SetDateCreated(t)
	return gc
}

// SetNillableDateCreated sets the "dateCreated" field if the given value is not nil.
func (gc *GroupCreate) SetNillableDateCreated(t *time.Time) *GroupCreate {
	if t != nil {
		gc.SetDateCreated(*t)
	}
	return gc
}

// SetDateModified sets the "dateModified" field.
func (gc *GroupCreate) SetDateModified(t time.Time) *GroupCreate {
	gc.mutation.SetDateModified(t)
	return gc
}

// SetNillableDateModified sets the "dateModified" field if the given value is not nil.
func (gc *GroupCreate) SetNillableDateModified(t *time.Time) *GroupCreate {
	if t != nil {
		gc.SetDateModified(*t)
	}
	return gc
}

// SetDateDeleted sets the "dateDeleted" field.
func (gc *GroupCreate) SetDateDeleted(t time.Time) *GroupCreate {
	gc.mutation.SetDateDeleted(t)
	return gc
}

// SetNillableDateDeleted sets the "dateDeleted" field if the given value is not nil.
func (gc *GroupCreate) SetNillableDateDeleted(t *time.Time) *GroupCreate {
	if t != nil {
		gc.SetDateDeleted(*t)
	}
	return gc
}

// SetID sets the "id" field.
func (gc *GroupCreate) SetID(u uuid.UUID) *GroupCreate {
	gc.mutation.SetID(u)
	return gc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gc *GroupCreate) SetNillableID(u *uuid.UUID) *GroupCreate {
	if u != nil {
		gc.SetID(*u)
	}
	return gc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (gc *GroupCreate) SetUsersID(id uuid.UUID) *GroupCreate {
	gc.mutation.SetUsersID(id)
	return gc
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (gc *GroupCreate) SetNillableUsersID(id *uuid.UUID) *GroupCreate {
	if id != nil {
		gc = gc.SetUsersID(*id)
	}
	return gc
}

// SetUsers sets the "users" edge to the User entity.
func (gc *GroupCreate) SetUsers(u *User) *GroupCreate {
	return gc.SetUsersID(u.ID)
}

// SetEntitiesID sets the "entities" edge to the Entity entity by ID.
func (gc *GroupCreate) SetEntitiesID(id uuid.UUID) *GroupCreate {
	gc.mutation.SetEntitiesID(id)
	return gc
}

// SetNillableEntitiesID sets the "entities" edge to the Entity entity by ID if the given value is not nil.
func (gc *GroupCreate) SetNillableEntitiesID(id *uuid.UUID) *GroupCreate {
	if id != nil {
		gc = gc.SetEntitiesID(*id)
	}
	return gc
}

// SetEntities sets the "entities" edge to the Entity entity.
func (gc *GroupCreate) SetEntities(e *Entity) *GroupCreate {
	return gc.SetEntitiesID(e.ID)
}

// Mutation returns the GroupMutation object of the builder.
func (gc *GroupCreate) Mutation() *GroupMutation {
	return gc.mutation
}

// Save creates the Group in the database.
func (gc *GroupCreate) Save(ctx context.Context) (*Group, error) {
	var (
		err  error
		node *Group
	)
	gc.defaults()
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GroupCreate) SaveX(ctx context.Context) *Group {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GroupCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GroupCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GroupCreate) defaults() {
	if _, ok := gc.mutation.InviteOnly(); !ok {
		v := group.DefaultInviteOnly
		gc.mutation.SetInviteOnly(v)
	}
	if _, ok := gc.mutation.DateCreated(); !ok {
		v := group.DefaultDateCreated
		gc.mutation.SetDateCreated(v)
	}
	if _, ok := gc.mutation.DateModified(); !ok {
		v := group.DefaultDateModified
		gc.mutation.SetDateModified(v)
	}
	if _, ok := gc.mutation.ID(); !ok {
		v := group.DefaultID()
		gc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GroupCreate) check() error {
	if _, ok := gc.mutation.GroupName(); !ok {
		return &ValidationError{Name: "groupName", err: errors.New(`ent: missing required field "Group.groupName"`)}
	}
	if _, ok := gc.mutation.MaxParticipants(); !ok {
		return &ValidationError{Name: "maxParticipants", err: errors.New(`ent: missing required field "Group.maxParticipants"`)}
	}
	if v, ok := gc.mutation.MaxParticipants(); ok {
		if err := group.MaxParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "maxParticipants", err: fmt.Errorf(`ent: validator failed for field "Group.maxParticipants": %w`, err)}
		}
	}
	if _, ok := gc.mutation.InviteOnly(); !ok {
		return &ValidationError{Name: "inviteOnly", err: errors.New(`ent: missing required field "Group.inviteOnly"`)}
	}
	if _, ok := gc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "dateCreated", err: errors.New(`ent: missing required field "Group.dateCreated"`)}
	}
	if _, ok := gc.mutation.DateModified(); !ok {
		return &ValidationError{Name: "dateModified", err: errors.New(`ent: missing required field "Group.dateModified"`)}
	}
	return nil
}

func (gc *GroupCreate) sqlSave(ctx context.Context) (*Group, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gc *GroupCreate) createSpec() (*Group, *sqlgraph.CreateSpec) {
	var (
		_node = &Group{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: group.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: group.FieldID,
			},
		}
	)
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gc.mutation.GroupName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldGroupName,
		})
		_node.GroupName = value
	}
	if value, ok := gc.mutation.MaxParticipants(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: group.FieldMaxParticipants,
		})
		_node.MaxParticipants = value
	}
	if value, ok := gc.mutation.InviteOnly(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: group.FieldInviteOnly,
		})
		_node.InviteOnly = value
	}
	if value, ok := gc.mutation.DateCreated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldDateCreated,
		})
		_node.DateCreated = value
	}
	if value, ok := gc.mutation.DateModified(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldDateModified,
		})
		_node.DateModified = value
	}
	if value, ok := gc.mutation.DateDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldDateDeleted,
		})
		_node.DateDeleted = value
	}
	if nodes := gc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   group.UsersTable,
			Columns: []string{group.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_users = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.EntitiesTable,
			Columns: []string{group.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.entity_groups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroupCreateBulk is the builder for creating many Group entities in bulk.
type GroupCreateBulk struct {
	config
	builders []*GroupCreate
}

// Save creates the Group entities in the database.
func (gcb *GroupCreateBulk) Save(ctx context.Context) ([]*Group, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Group, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GroupCreateBulk) SaveX(ctx context.Context) []*Group {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GroupCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GroupCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
