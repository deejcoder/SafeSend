// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SafeSend/pkg/ent/entity"
	"SafeSend/pkg/ent/group"
	"SafeSend/pkg/ent/predicate"
	"SafeSend/pkg/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetGroupName sets the "groupName" field.
func (gu *GroupUpdate) SetGroupName(s string) *GroupUpdate {
	gu.mutation.SetGroupName(s)
	return gu
}

// SetMaxParticipants sets the "maxParticipants" field.
func (gu *GroupUpdate) SetMaxParticipants(i int32) *GroupUpdate {
	gu.mutation.ResetMaxParticipants()
	gu.mutation.SetMaxParticipants(i)
	return gu
}

// AddMaxParticipants adds i to the "maxParticipants" field.
func (gu *GroupUpdate) AddMaxParticipants(i int32) *GroupUpdate {
	gu.mutation.AddMaxParticipants(i)
	return gu
}

// SetInviteOnly sets the "inviteOnly" field.
func (gu *GroupUpdate) SetInviteOnly(b bool) *GroupUpdate {
	gu.mutation.SetInviteOnly(b)
	return gu
}

// SetNillableInviteOnly sets the "inviteOnly" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableInviteOnly(b *bool) *GroupUpdate {
	if b != nil {
		gu.SetInviteOnly(*b)
	}
	return gu
}

// SetDateCreated sets the "dateCreated" field.
func (gu *GroupUpdate) SetDateCreated(t time.Time) *GroupUpdate {
	gu.mutation.SetDateCreated(t)
	return gu
}

// SetNillableDateCreated sets the "dateCreated" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDateCreated(t *time.Time) *GroupUpdate {
	if t != nil {
		gu.SetDateCreated(*t)
	}
	return gu
}

// SetDateModified sets the "dateModified" field.
func (gu *GroupUpdate) SetDateModified(t time.Time) *GroupUpdate {
	gu.mutation.SetDateModified(t)
	return gu
}

// SetNillableDateModified sets the "dateModified" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDateModified(t *time.Time) *GroupUpdate {
	if t != nil {
		gu.SetDateModified(*t)
	}
	return gu
}

// SetDateDeleted sets the "dateDeleted" field.
func (gu *GroupUpdate) SetDateDeleted(t time.Time) *GroupUpdate {
	gu.mutation.SetDateDeleted(t)
	return gu
}

// SetNillableDateDeleted sets the "dateDeleted" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDateDeleted(t *time.Time) *GroupUpdate {
	if t != nil {
		gu.SetDateDeleted(*t)
	}
	return gu
}

// ClearDateDeleted clears the value of the "dateDeleted" field.
func (gu *GroupUpdate) ClearDateDeleted() *GroupUpdate {
	gu.mutation.ClearDateDeleted()
	return gu
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (gu *GroupUpdate) SetUsersID(id uuid.UUID) *GroupUpdate {
	gu.mutation.SetUsersID(id)
	return gu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (gu *GroupUpdate) SetNillableUsersID(id *uuid.UUID) *GroupUpdate {
	if id != nil {
		gu = gu.SetUsersID(*id)
	}
	return gu
}

// SetUsers sets the "users" edge to the User entity.
func (gu *GroupUpdate) SetUsers(u *User) *GroupUpdate {
	return gu.SetUsersID(u.ID)
}

// SetEntitiesID sets the "entities" edge to the Entity entity by ID.
func (gu *GroupUpdate) SetEntitiesID(id uuid.UUID) *GroupUpdate {
	gu.mutation.SetEntitiesID(id)
	return gu
}

// SetNillableEntitiesID sets the "entities" edge to the Entity entity by ID if the given value is not nil.
func (gu *GroupUpdate) SetNillableEntitiesID(id *uuid.UUID) *GroupUpdate {
	if id != nil {
		gu = gu.SetEntitiesID(*id)
	}
	return gu
}

// SetEntities sets the "entities" edge to the Entity entity.
func (gu *GroupUpdate) SetEntities(e *Entity) *GroupUpdate {
	return gu.SetEntitiesID(e.ID)
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (gu *GroupUpdate) ClearUsers() *GroupUpdate {
	gu.mutation.ClearUsers()
	return gu
}

// ClearEntities clears the "entities" edge to the Entity entity.
func (gu *GroupUpdate) ClearEntities() *GroupUpdate {
	gu.mutation.ClearEntities()
	return gu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		if err = gu.check(); err != nil {
			return 0, err
		}
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gu.check(); err != nil {
				return 0, err
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupUpdate) check() error {
	if v, ok := gu.mutation.MaxParticipants(); ok {
		if err := group.MaxParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "maxParticipants", err: fmt.Errorf(`ent: validator failed for field "Group.maxParticipants": %w`, err)}
		}
	}
	return nil
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   group.Table,
			Columns: group.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: group.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.GroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldGroupName,
		})
	}
	if value, ok := gu.mutation.MaxParticipants(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: group.FieldMaxParticipants,
		})
	}
	if value, ok := gu.mutation.AddedMaxParticipants(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: group.FieldMaxParticipants,
		})
	}
	if value, ok := gu.mutation.InviteOnly(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: group.FieldInviteOnly,
		})
	}
	if value, ok := gu.mutation.DateCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldDateCreated,
		})
	}
	if value, ok := gu.mutation.DateModified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldDateModified,
		})
	}
	if value, ok := gu.mutation.DateDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldDateDeleted,
		})
	}
	if gu.mutation.DateDeletedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: group.FieldDateDeleted,
		})
	}
	if gu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   group.UsersTable,
			Columns: []string{group.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   group.UsersTable,
			Columns: []string{group.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.EntitiesTable,
			Columns: []string{group.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.EntitiesTable,
			Columns: []string{group.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetGroupName sets the "groupName" field.
func (guo *GroupUpdateOne) SetGroupName(s string) *GroupUpdateOne {
	guo.mutation.SetGroupName(s)
	return guo
}

// SetMaxParticipants sets the "maxParticipants" field.
func (guo *GroupUpdateOne) SetMaxParticipants(i int32) *GroupUpdateOne {
	guo.mutation.ResetMaxParticipants()
	guo.mutation.SetMaxParticipants(i)
	return guo
}

// AddMaxParticipants adds i to the "maxParticipants" field.
func (guo *GroupUpdateOne) AddMaxParticipants(i int32) *GroupUpdateOne {
	guo.mutation.AddMaxParticipants(i)
	return guo
}

// SetInviteOnly sets the "inviteOnly" field.
func (guo *GroupUpdateOne) SetInviteOnly(b bool) *GroupUpdateOne {
	guo.mutation.SetInviteOnly(b)
	return guo
}

// SetNillableInviteOnly sets the "inviteOnly" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableInviteOnly(b *bool) *GroupUpdateOne {
	if b != nil {
		guo.SetInviteOnly(*b)
	}
	return guo
}

// SetDateCreated sets the "dateCreated" field.
func (guo *GroupUpdateOne) SetDateCreated(t time.Time) *GroupUpdateOne {
	guo.mutation.SetDateCreated(t)
	return guo
}

// SetNillableDateCreated sets the "dateCreated" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDateCreated(t *time.Time) *GroupUpdateOne {
	if t != nil {
		guo.SetDateCreated(*t)
	}
	return guo
}

// SetDateModified sets the "dateModified" field.
func (guo *GroupUpdateOne) SetDateModified(t time.Time) *GroupUpdateOne {
	guo.mutation.SetDateModified(t)
	return guo
}

// SetNillableDateModified sets the "dateModified" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDateModified(t *time.Time) *GroupUpdateOne {
	if t != nil {
		guo.SetDateModified(*t)
	}
	return guo
}

// SetDateDeleted sets the "dateDeleted" field.
func (guo *GroupUpdateOne) SetDateDeleted(t time.Time) *GroupUpdateOne {
	guo.mutation.SetDateDeleted(t)
	return guo
}

// SetNillableDateDeleted sets the "dateDeleted" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDateDeleted(t *time.Time) *GroupUpdateOne {
	if t != nil {
		guo.SetDateDeleted(*t)
	}
	return guo
}

// ClearDateDeleted clears the value of the "dateDeleted" field.
func (guo *GroupUpdateOne) ClearDateDeleted() *GroupUpdateOne {
	guo.mutation.ClearDateDeleted()
	return guo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (guo *GroupUpdateOne) SetUsersID(id uuid.UUID) *GroupUpdateOne {
	guo.mutation.SetUsersID(id)
	return guo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableUsersID(id *uuid.UUID) *GroupUpdateOne {
	if id != nil {
		guo = guo.SetUsersID(*id)
	}
	return guo
}

// SetUsers sets the "users" edge to the User entity.
func (guo *GroupUpdateOne) SetUsers(u *User) *GroupUpdateOne {
	return guo.SetUsersID(u.ID)
}

// SetEntitiesID sets the "entities" edge to the Entity entity by ID.
func (guo *GroupUpdateOne) SetEntitiesID(id uuid.UUID) *GroupUpdateOne {
	guo.mutation.SetEntitiesID(id)
	return guo
}

// SetNillableEntitiesID sets the "entities" edge to the Entity entity by ID if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableEntitiesID(id *uuid.UUID) *GroupUpdateOne {
	if id != nil {
		guo = guo.SetEntitiesID(*id)
	}
	return guo
}

// SetEntities sets the "entities" edge to the Entity entity.
func (guo *GroupUpdateOne) SetEntities(e *Entity) *GroupUpdateOne {
	return guo.SetEntitiesID(e.ID)
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (guo *GroupUpdateOne) ClearUsers() *GroupUpdateOne {
	guo.mutation.ClearUsers()
	return guo
}

// ClearEntities clears the "entities" edge to the Entity entity.
func (guo *GroupUpdateOne) ClearEntities() *GroupUpdateOne {
	guo.mutation.ClearEntities()
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	var (
		err  error
		node *Group
	)
	if len(guo.hooks) == 0 {
		if err = guo.check(); err != nil {
			return nil, err
		}
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = guo.check(); err != nil {
				return nil, err
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupUpdateOne) check() error {
	if v, ok := guo.mutation.MaxParticipants(); ok {
		if err := group.MaxParticipantsValidator(v); err != nil {
			return &ValidationError{Name: "maxParticipants", err: fmt.Errorf(`ent: validator failed for field "Group.maxParticipants": %w`, err)}
		}
	}
	return nil
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   group.Table,
			Columns: group.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: group.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.GroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldGroupName,
		})
	}
	if value, ok := guo.mutation.MaxParticipants(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: group.FieldMaxParticipants,
		})
	}
	if value, ok := guo.mutation.AddedMaxParticipants(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: group.FieldMaxParticipants,
		})
	}
	if value, ok := guo.mutation.InviteOnly(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: group.FieldInviteOnly,
		})
	}
	if value, ok := guo.mutation.DateCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldDateCreated,
		})
	}
	if value, ok := guo.mutation.DateModified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldDateModified,
		})
	}
	if value, ok := guo.mutation.DateDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldDateDeleted,
		})
	}
	if guo.mutation.DateDeletedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: group.FieldDateDeleted,
		})
	}
	if guo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   group.UsersTable,
			Columns: []string{group.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   group.UsersTable,
			Columns: []string{group.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.EntitiesTable,
			Columns: []string{group.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.EntitiesTable,
			Columns: []string{group.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
