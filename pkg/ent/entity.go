// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SafeSend/pkg/ent/entity"
	"SafeSend/pkg/interfaces"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Entity is the model entity for the Entity schema.
type Entity struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EntityType holds the value of the "entity_type" field.
	// Based on the entity type we can determine how to send messages
	EntityType interfaces.EntityType `json:"entity_type,omitempty"`
	// DateCreated holds the value of the "date_created" field.
	DateCreated time.Time `json:"date_created,omitempty"`
	// DateModified holds the value of the "date_modified" field.
	DateModified time.Time `json:"date_modified,omitempty"`
	// DateDeleted holds the value of the "date_deleted" field.
	DateDeleted time.Time `json:"date_deleted,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntityQuery when eager-loading is set.
	Edges EntityEdges `json:"edges"`
}

// EntityEdges holds the relations/edges for other nodes in the graph.
type EntityEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Entity) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case entity.FieldEntityType:
			values[i] = new(sql.NullString)
		case entity.FieldDateCreated, entity.FieldDateModified, entity.FieldDateDeleted:
			values[i] = new(sql.NullTime)
		case entity.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Entity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Entity fields.
func (e *Entity) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entity.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case entity.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				e.EntityType = interfaces.EntityType(value.String)
			}
		case entity.FieldDateCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_created", values[i])
			} else if value.Valid {
				e.DateCreated = value.Time
			}
		case entity.FieldDateModified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_modified", values[i])
			} else if value.Valid {
				e.DateModified = value.Time
			}
		case entity.FieldDateDeleted:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_deleted", values[i])
			} else if value.Valid {
				e.DateDeleted = value.Time
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the Entity entity.
func (e *Entity) QueryUsers() *UserQuery {
	return (&EntityClient{config: e.config}).QueryUsers(e)
}

// QueryGroups queries the "groups" edge of the Entity entity.
func (e *Entity) QueryGroups() *GroupQuery {
	return (&EntityClient{config: e.config}).QueryGroups(e)
}

// Update returns a builder for updating this Entity.
// Note that you need to call Entity.Unwrap() before calling this method if this Entity
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Entity) Update() *EntityUpdateOne {
	return (&EntityClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Entity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Entity) Unwrap() *Entity {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Entity is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Entity) String() string {
	var builder strings.Builder
	builder.WriteString("Entity(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", entity_type=")
	builder.WriteString(fmt.Sprintf("%v", e.EntityType))
	builder.WriteString(", date_created=")
	builder.WriteString(e.DateCreated.Format(time.ANSIC))
	builder.WriteString(", date_modified=")
	builder.WriteString(e.DateModified.Format(time.ANSIC))
	builder.WriteString(", date_deleted=")
	builder.WriteString(e.DateDeleted.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Entities is a parsable slice of Entity.
type Entities []*Entity

func (e Entities) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
