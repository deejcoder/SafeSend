// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SafeSend/pkg/ent/accesstoken"
	"SafeSend/pkg/interfaces"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// AccessToken is the model entity for the AccessToken schema.
type AccessToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TokenProvider holds the value of the "token_provider" field.
	// The vendor that provided the token.
	TokenProvider interfaces.TokenProvider `json:"token_provider,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken string `json:"refresh_token,omitempty"`
	// Expiry holds the value of the "expiry" field.
	Expiry time.Time `json:"expiry,omitempty"`
	// DateCreated holds the value of the "date_created" field.
	DateCreated time.Time `json:"date_created,omitempty"`
	// DateModified holds the value of the "date_modified" field.
	DateModified time.Time `json:"date_modified,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccessTokenQuery when eager-loading is set.
	Edges AccessTokenEdges `json:"edges"`
}

// AccessTokenEdges holds the relations/edges for other nodes in the graph.
type AccessTokenEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AccessTokenEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccessToken) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case accesstoken.FieldTokenProvider, accesstoken.FieldAccessToken, accesstoken.FieldRefreshToken:
			values[i] = new(sql.NullString)
		case accesstoken.FieldExpiry, accesstoken.FieldDateCreated, accesstoken.FieldDateModified:
			values[i] = new(sql.NullTime)
		case accesstoken.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AccessToken", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccessToken fields.
func (at *AccessToken) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accesstoken.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				at.ID = *value
			}
		case accesstoken.FieldTokenProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_provider", values[i])
			} else if value.Valid {
				at.TokenProvider = interfaces.TokenProvider(value.String)
			}
		case accesstoken.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				at.AccessToken = value.String
			}
		case accesstoken.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				at.RefreshToken = value.String
			}
		case accesstoken.FieldExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry", values[i])
			} else if value.Valid {
				at.Expiry = value.Time
			}
		case accesstoken.FieldDateCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_created", values[i])
			} else if value.Valid {
				at.DateCreated = value.Time
			}
		case accesstoken.FieldDateModified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_modified", values[i])
			} else if value.Valid {
				at.DateModified = value.Time
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the AccessToken entity.
func (at *AccessToken) QueryUsers() *UserQuery {
	return (&AccessTokenClient{config: at.config}).QueryUsers(at)
}

// Update returns a builder for updating this AccessToken.
// Note that you need to call AccessToken.Unwrap() before calling this method if this AccessToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AccessToken) Update() *AccessTokenUpdateOne {
	return (&AccessTokenClient{config: at.config}).UpdateOne(at)
}

// Unwrap unwraps the AccessToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AccessToken) Unwrap() *AccessToken {
	tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccessToken is not a transactional entity")
	}
	at.config.driver = tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AccessToken) String() string {
	var builder strings.Builder
	builder.WriteString("AccessToken(")
	builder.WriteString(fmt.Sprintf("id=%v", at.ID))
	builder.WriteString(", token_provider=")
	builder.WriteString(fmt.Sprintf("%v", at.TokenProvider))
	builder.WriteString(", access_token=")
	builder.WriteString(at.AccessToken)
	builder.WriteString(", refresh_token=")
	builder.WriteString(at.RefreshToken)
	builder.WriteString(", expiry=")
	builder.WriteString(at.Expiry.Format(time.ANSIC))
	builder.WriteString(", date_created=")
	builder.WriteString(at.DateCreated.Format(time.ANSIC))
	builder.WriteString(", date_modified=")
	builder.WriteString(at.DateModified.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AccessTokens is a parsable slice of AccessToken.
type AccessTokens []*AccessToken

func (at AccessTokens) config(cfg config) {
	for _i := range at {
		at[_i].config = cfg
	}
}
