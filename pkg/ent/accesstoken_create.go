// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SafeSend/pkg/ent/accesstoken"
	"SafeSend/pkg/ent/user"
	"SafeSend/pkg/interfaces"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AccessTokenCreate is the builder for creating a AccessToken entity.
type AccessTokenCreate struct {
	config
	mutation *AccessTokenMutation
	hooks    []Hook
}

// SetTokenProvider sets the "token_provider" field.
func (atc *AccessTokenCreate) SetTokenProvider(ip interfaces.TokenProvider) *AccessTokenCreate {
	atc.mutation.SetTokenProvider(ip)
	return atc
}

// SetAccessToken sets the "access_token" field.
func (atc *AccessTokenCreate) SetAccessToken(s string) *AccessTokenCreate {
	atc.mutation.SetAccessToken(s)
	return atc
}

// SetRefreshToken sets the "refresh_token" field.
func (atc *AccessTokenCreate) SetRefreshToken(s string) *AccessTokenCreate {
	atc.mutation.SetRefreshToken(s)
	return atc
}

// SetExpiry sets the "expiry" field.
func (atc *AccessTokenCreate) SetExpiry(t time.Time) *AccessTokenCreate {
	atc.mutation.SetExpiry(t)
	return atc
}

// SetDateCreated sets the "date_created" field.
func (atc *AccessTokenCreate) SetDateCreated(t time.Time) *AccessTokenCreate {
	atc.mutation.SetDateCreated(t)
	return atc
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableDateCreated(t *time.Time) *AccessTokenCreate {
	if t != nil {
		atc.SetDateCreated(*t)
	}
	return atc
}

// SetDateModified sets the "date_modified" field.
func (atc *AccessTokenCreate) SetDateModified(t time.Time) *AccessTokenCreate {
	atc.mutation.SetDateModified(t)
	return atc
}

// SetNillableDateModified sets the "date_modified" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableDateModified(t *time.Time) *AccessTokenCreate {
	if t != nil {
		atc.SetDateModified(*t)
	}
	return atc
}

// SetID sets the "id" field.
func (atc *AccessTokenCreate) SetID(u uuid.UUID) *AccessTokenCreate {
	atc.mutation.SetID(u)
	return atc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableID(u *uuid.UUID) *AccessTokenCreate {
	if u != nil {
		atc.SetID(*u)
	}
	return atc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (atc *AccessTokenCreate) AddUserIDs(ids ...uuid.UUID) *AccessTokenCreate {
	atc.mutation.AddUserIDs(ids...)
	return atc
}

// AddUsers adds the "users" edges to the User entity.
func (atc *AccessTokenCreate) AddUsers(u ...*User) *AccessTokenCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return atc.AddUserIDs(ids...)
}

// Mutation returns the AccessTokenMutation object of the builder.
func (atc *AccessTokenCreate) Mutation() *AccessTokenMutation {
	return atc.mutation
}

// Save creates the AccessToken in the database.
func (atc *AccessTokenCreate) Save(ctx context.Context) (*AccessToken, error) {
	var (
		err  error
		node *AccessToken
	)
	atc.defaults()
	if len(atc.hooks) == 0 {
		if err = atc.check(); err != nil {
			return nil, err
		}
		node, err = atc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccessTokenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atc.check(); err != nil {
				return nil, err
			}
			atc.mutation = mutation
			if node, err = atc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(atc.hooks) - 1; i >= 0; i-- {
			if atc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AccessTokenCreate) SaveX(ctx context.Context) *AccessToken {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AccessTokenCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AccessTokenCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *AccessTokenCreate) defaults() {
	if _, ok := atc.mutation.DateCreated(); !ok {
		v := accesstoken.DefaultDateCreated
		atc.mutation.SetDateCreated(v)
	}
	if _, ok := atc.mutation.DateModified(); !ok {
		v := accesstoken.DefaultDateModified
		atc.mutation.SetDateModified(v)
	}
	if _, ok := atc.mutation.ID(); !ok {
		v := accesstoken.DefaultID()
		atc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AccessTokenCreate) check() error {
	if _, ok := atc.mutation.TokenProvider(); !ok {
		return &ValidationError{Name: "token_provider", err: errors.New(`ent: missing required field "AccessToken.token_provider"`)}
	}
	if v, ok := atc.mutation.TokenProvider(); ok {
		if err := accesstoken.TokenProviderValidator(v); err != nil {
			return &ValidationError{Name: "token_provider", err: fmt.Errorf(`ent: validator failed for field "AccessToken.token_provider": %w`, err)}
		}
	}
	if _, ok := atc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "AccessToken.access_token"`)}
	}
	if v, ok := atc.mutation.AccessToken(); ok {
		if err := accesstoken.AccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "access_token", err: fmt.Errorf(`ent: validator failed for field "AccessToken.access_token": %w`, err)}
		}
	}
	if _, ok := atc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`ent: missing required field "AccessToken.refresh_token"`)}
	}
	if v, ok := atc.mutation.RefreshToken(); ok {
		if err := accesstoken.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf(`ent: validator failed for field "AccessToken.refresh_token": %w`, err)}
		}
	}
	if _, ok := atc.mutation.Expiry(); !ok {
		return &ValidationError{Name: "expiry", err: errors.New(`ent: missing required field "AccessToken.expiry"`)}
	}
	if _, ok := atc.mutation.DateCreated(); !ok {
		return &ValidationError{Name: "date_created", err: errors.New(`ent: missing required field "AccessToken.date_created"`)}
	}
	if _, ok := atc.mutation.DateModified(); !ok {
		return &ValidationError{Name: "date_modified", err: errors.New(`ent: missing required field "AccessToken.date_modified"`)}
	}
	return nil
}

func (atc *AccessTokenCreate) sqlSave(ctx context.Context) (*AccessToken, error) {
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (atc *AccessTokenCreate) createSpec() (*AccessToken, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessToken{config: atc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: accesstoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: accesstoken.FieldID,
			},
		}
	)
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := atc.mutation.TokenProvider(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: accesstoken.FieldTokenProvider,
		})
		_node.TokenProvider = value
	}
	if value, ok := atc.mutation.AccessToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesstoken.FieldAccessToken,
		})
		_node.AccessToken = value
	}
	if value, ok := atc.mutation.RefreshToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesstoken.FieldRefreshToken,
		})
		_node.RefreshToken = value
	}
	if value, ok := atc.mutation.Expiry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesstoken.FieldExpiry,
		})
		_node.Expiry = value
	}
	if value, ok := atc.mutation.DateCreated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesstoken.FieldDateCreated,
		})
		_node.DateCreated = value
	}
	if value, ok := atc.mutation.DateModified(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesstoken.FieldDateModified,
		})
		_node.DateModified = value
	}
	if nodes := atc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesstoken.UsersTable,
			Columns: accesstoken.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccessTokenCreateBulk is the builder for creating many AccessToken entities in bulk.
type AccessTokenCreateBulk struct {
	config
	builders []*AccessTokenCreate
}

// Save creates the AccessToken entities in the database.
func (atcb *AccessTokenCreateBulk) Save(ctx context.Context) ([]*AccessToken, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AccessToken, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AccessTokenCreateBulk) SaveX(ctx context.Context) []*AccessToken {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AccessTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AccessTokenCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
