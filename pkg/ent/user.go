// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SafeSend/pkg/ent/entity"
	"SafeSend/pkg/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// DisplayName holds the value of the "displayName" field.
	DisplayName string `json:"displayName,omitempty"`
	// DateAccessed holds the value of the "dateAccessed" field.
	DateAccessed time.Time `json:"dateAccessed,omitempty"`
	// DateCreated holds the value of the "dateCreated" field.
	DateCreated time.Time `json:"dateCreated,omitempty"`
	// DateModified holds the value of the "dateModified" field.
	DateModified time.Time `json:"dateModified,omitempty"`
	// DeletedDate holds the value of the "deletedDate" field.
	DeletedDate time.Time `json:"deletedDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	entity_users *uuid.UUID
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Entities holds the value of the entities edge.
	Entities *Entity `json:"entities,omitempty"`
	// AccessTokens holds the value of the access_tokens edge.
	AccessTokens []*AccessToken `json:"access_tokens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[0] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// EntitiesOrErr returns the Entities value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) EntitiesOrErr() (*Entity, error) {
	if e.loadedTypes[1] {
		if e.Entities == nil {
			// The edge entities was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: entity.Label}
		}
		return e.Entities, nil
	}
	return nil, &NotLoadedError{edge: "entities"}
}

// AccessTokensOrErr returns the AccessTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AccessTokensOrErr() ([]*AccessToken, error) {
	if e.loadedTypes[2] {
		return e.AccessTokens, nil
	}
	return nil, &NotLoadedError{edge: "access_tokens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldEmail, user.FieldDisplayName:
			values[i] = new(sql.NullString)
		case user.FieldDateAccessed, user.FieldDateCreated, user.FieldDateModified, user.FieldDeletedDate:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		case user.ForeignKeys[0]: // entity_users
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field displayName", values[i])
			} else if value.Valid {
				u.DisplayName = value.String
			}
		case user.FieldDateAccessed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateAccessed", values[i])
			} else if value.Valid {
				u.DateAccessed = value.Time
			}
		case user.FieldDateCreated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateCreated", values[i])
			} else if value.Valid {
				u.DateCreated = value.Time
			}
		case user.FieldDateModified:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateModified", values[i])
			} else if value.Valid {
				u.DateModified = value.Time
			}
		case user.FieldDeletedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deletedDate", values[i])
			} else if value.Valid {
				u.DeletedDate = value.Time
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field entity_users", values[i])
			} else if value.Valid {
				u.entity_users = new(uuid.UUID)
				*u.entity_users = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryGroups queries the "groups" edge of the User entity.
func (u *User) QueryGroups() *GroupQuery {
	return (&UserClient{config: u.config}).QueryGroups(u)
}

// QueryEntities queries the "entities" edge of the User entity.
func (u *User) QueryEntities() *EntityQuery {
	return (&UserClient{config: u.config}).QueryEntities(u)
}

// QueryAccessTokens queries the "access_tokens" edge of the User entity.
func (u *User) QueryAccessTokens() *AccessTokenQuery {
	return (&UserClient{config: u.config}).QueryAccessTokens(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", displayName=")
	builder.WriteString(u.DisplayName)
	builder.WriteString(", dateAccessed=")
	builder.WriteString(u.DateAccessed.Format(time.ANSIC))
	builder.WriteString(", dateCreated=")
	builder.WriteString(u.DateCreated.Format(time.ANSIC))
	builder.WriteString(", dateModified=")
	builder.WriteString(u.DateModified.Format(time.ANSIC))
	builder.WriteString(", deletedDate=")
	builder.WriteString(u.DeletedDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
