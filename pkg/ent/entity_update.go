// Code generated by entc, DO NOT EDIT.

package ent

import (
	"SafeSend/pkg/ent/entity"
	"SafeSend/pkg/ent/group"
	"SafeSend/pkg/ent/predicate"
	"SafeSend/pkg/ent/user"
	"SafeSend/pkg/interfaces"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EntityUpdate is the builder for updating Entity entities.
type EntityUpdate struct {
	config
	hooks    []Hook
	mutation *EntityMutation
}

// Where appends a list predicates to the EntityUpdate builder.
func (eu *EntityUpdate) Where(ps ...predicate.Entity) *EntityUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetEntityType sets the "entity_type" field.
func (eu *EntityUpdate) SetEntityType(it interfaces.EntityType) *EntityUpdate {
	eu.mutation.SetEntityType(it)
	return eu
}

// SetDateCreated sets the "date_created" field.
func (eu *EntityUpdate) SetDateCreated(t time.Time) *EntityUpdate {
	eu.mutation.SetDateCreated(t)
	return eu
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableDateCreated(t *time.Time) *EntityUpdate {
	if t != nil {
		eu.SetDateCreated(*t)
	}
	return eu
}

// SetDateModified sets the "date_modified" field.
func (eu *EntityUpdate) SetDateModified(t time.Time) *EntityUpdate {
	eu.mutation.SetDateModified(t)
	return eu
}

// SetNillableDateModified sets the "date_modified" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableDateModified(t *time.Time) *EntityUpdate {
	if t != nil {
		eu.SetDateModified(*t)
	}
	return eu
}

// SetDateDeleted sets the "date_deleted" field.
func (eu *EntityUpdate) SetDateDeleted(t time.Time) *EntityUpdate {
	eu.mutation.SetDateDeleted(t)
	return eu
}

// SetNillableDateDeleted sets the "date_deleted" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableDateDeleted(t *time.Time) *EntityUpdate {
	if t != nil {
		eu.SetDateDeleted(*t)
	}
	return eu
}

// ClearDateDeleted clears the value of the "date_deleted" field.
func (eu *EntityUpdate) ClearDateDeleted() *EntityUpdate {
	eu.mutation.ClearDateDeleted()
	return eu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (eu *EntityUpdate) AddUserIDs(ids ...uuid.UUID) *EntityUpdate {
	eu.mutation.AddUserIDs(ids...)
	return eu
}

// AddUsers adds the "users" edges to the User entity.
func (eu *EntityUpdate) AddUsers(u ...*User) *EntityUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddUserIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (eu *EntityUpdate) AddGroupIDs(ids ...uuid.UUID) *EntityUpdate {
	eu.mutation.AddGroupIDs(ids...)
	return eu
}

// AddGroups adds the "groups" edges to the Group entity.
func (eu *EntityUpdate) AddGroups(g ...*Group) *EntityUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.AddGroupIDs(ids...)
}

// Mutation returns the EntityMutation object of the builder.
func (eu *EntityUpdate) Mutation() *EntityMutation {
	return eu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (eu *EntityUpdate) ClearUsers() *EntityUpdate {
	eu.mutation.ClearUsers()
	return eu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (eu *EntityUpdate) RemoveUserIDs(ids ...uuid.UUID) *EntityUpdate {
	eu.mutation.RemoveUserIDs(ids...)
	return eu
}

// RemoveUsers removes "users" edges to User entities.
func (eu *EntityUpdate) RemoveUsers(u ...*User) *EntityUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveUserIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (eu *EntityUpdate) ClearGroups() *EntityUpdate {
	eu.mutation.ClearGroups()
	return eu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (eu *EntityUpdate) RemoveGroupIDs(ids ...uuid.UUID) *EntityUpdate {
	eu.mutation.RemoveGroupIDs(ids...)
	return eu
}

// RemoveGroups removes "groups" edges to Group entities.
func (eu *EntityUpdate) RemoveGroups(g ...*Group) *EntityUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntityUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntityUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntityUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EntityUpdate) check() error {
	if v, ok := eu.mutation.EntityType(); ok {
		if err := entity.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "Entity.entity_type": %w`, err)}
		}
	}
	return nil
}

func (eu *EntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entity.Table,
			Columns: entity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entity.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.EntityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entity.FieldEntityType,
		})
	}
	if value, ok := eu.mutation.DateCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateCreated,
		})
	}
	if value, ok := eu.mutation.DateModified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateModified,
		})
	}
	if value, ok := eu.mutation.DateDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateDeleted,
		})
	}
	if eu.mutation.DateDeletedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: entity.FieldDateDeleted,
		})
	}
	if eu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.UsersTable,
			Columns: []string{entity.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !eu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.UsersTable,
			Columns: []string{entity.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.UsersTable,
			Columns: []string{entity.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.GroupsTable,
			Columns: []string{entity.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !eu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.GroupsTable,
			Columns: []string{entity.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.GroupsTable,
			Columns: []string{entity.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EntityUpdateOne is the builder for updating a single Entity entity.
type EntityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntityMutation
}

// SetEntityType sets the "entity_type" field.
func (euo *EntityUpdateOne) SetEntityType(it interfaces.EntityType) *EntityUpdateOne {
	euo.mutation.SetEntityType(it)
	return euo
}

// SetDateCreated sets the "date_created" field.
func (euo *EntityUpdateOne) SetDateCreated(t time.Time) *EntityUpdateOne {
	euo.mutation.SetDateCreated(t)
	return euo
}

// SetNillableDateCreated sets the "date_created" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableDateCreated(t *time.Time) *EntityUpdateOne {
	if t != nil {
		euo.SetDateCreated(*t)
	}
	return euo
}

// SetDateModified sets the "date_modified" field.
func (euo *EntityUpdateOne) SetDateModified(t time.Time) *EntityUpdateOne {
	euo.mutation.SetDateModified(t)
	return euo
}

// SetNillableDateModified sets the "date_modified" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableDateModified(t *time.Time) *EntityUpdateOne {
	if t != nil {
		euo.SetDateModified(*t)
	}
	return euo
}

// SetDateDeleted sets the "date_deleted" field.
func (euo *EntityUpdateOne) SetDateDeleted(t time.Time) *EntityUpdateOne {
	euo.mutation.SetDateDeleted(t)
	return euo
}

// SetNillableDateDeleted sets the "date_deleted" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableDateDeleted(t *time.Time) *EntityUpdateOne {
	if t != nil {
		euo.SetDateDeleted(*t)
	}
	return euo
}

// ClearDateDeleted clears the value of the "date_deleted" field.
func (euo *EntityUpdateOne) ClearDateDeleted() *EntityUpdateOne {
	euo.mutation.ClearDateDeleted()
	return euo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (euo *EntityUpdateOne) AddUserIDs(ids ...uuid.UUID) *EntityUpdateOne {
	euo.mutation.AddUserIDs(ids...)
	return euo
}

// AddUsers adds the "users" edges to the User entity.
func (euo *EntityUpdateOne) AddUsers(u ...*User) *EntityUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddUserIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (euo *EntityUpdateOne) AddGroupIDs(ids ...uuid.UUID) *EntityUpdateOne {
	euo.mutation.AddGroupIDs(ids...)
	return euo
}

// AddGroups adds the "groups" edges to the Group entity.
func (euo *EntityUpdateOne) AddGroups(g ...*Group) *EntityUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.AddGroupIDs(ids...)
}

// Mutation returns the EntityMutation object of the builder.
func (euo *EntityUpdateOne) Mutation() *EntityMutation {
	return euo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (euo *EntityUpdateOne) ClearUsers() *EntityUpdateOne {
	euo.mutation.ClearUsers()
	return euo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (euo *EntityUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *EntityUpdateOne {
	euo.mutation.RemoveUserIDs(ids...)
	return euo
}

// RemoveUsers removes "users" edges to User entities.
func (euo *EntityUpdateOne) RemoveUsers(u ...*User) *EntityUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveUserIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (euo *EntityUpdateOne) ClearGroups() *EntityUpdateOne {
	euo.mutation.ClearGroups()
	return euo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (euo *EntityUpdateOne) RemoveGroupIDs(ids ...uuid.UUID) *EntityUpdateOne {
	euo.mutation.RemoveGroupIDs(ids...)
	return euo
}

// RemoveGroups removes "groups" edges to Group entities.
func (euo *EntityUpdateOne) RemoveGroups(g ...*Group) *EntityUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.RemoveGroupIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntityUpdateOne) Select(field string, fields ...string) *EntityUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entity entity.
func (euo *EntityUpdateOne) Save(ctx context.Context) (*Entity, error) {
	var (
		err  error
		node *Entity
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntityUpdateOne) SaveX(ctx context.Context) *Entity {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntityUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntityUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EntityUpdateOne) check() error {
	if v, ok := euo.mutation.EntityType(); ok {
		if err := entity.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "Entity.entity_type": %w`, err)}
		}
	}
	return nil
}

func (euo *EntityUpdateOne) sqlSave(ctx context.Context) (_node *Entity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entity.Table,
			Columns: entity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: entity.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Entity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entity.FieldID)
		for _, f := range fields {
			if !entity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.EntityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entity.FieldEntityType,
		})
	}
	if value, ok := euo.mutation.DateCreated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateCreated,
		})
	}
	if value, ok := euo.mutation.DateModified(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateModified,
		})
	}
	if value, ok := euo.mutation.DateDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entity.FieldDateDeleted,
		})
	}
	if euo.mutation.DateDeletedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: entity.FieldDateDeleted,
		})
	}
	if euo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.UsersTable,
			Columns: []string{entity.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !euo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.UsersTable,
			Columns: []string{entity.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.UsersTable,
			Columns: []string{entity.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.GroupsTable,
			Columns: []string{entity.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !euo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.GroupsTable,
			Columns: []string{entity.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.GroupsTable,
			Columns: []string{entity.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Entity{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
